{"version":3,"sources":["components/LeftMenu.js","components/Footer.js","components/PageTemplate.js","components/PostCard.js","services/post.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["LeftMenu","state","activeItem","handleItemClick","e","_ref","name","_this","setState","props","callbackToTellParent","selectedArtist","_this2","this","artistItems","artists","map","artistName","index","react_default","a","createElement","Menu","Item","key","active","onClick","pointing","secondary","vertical","Component","Footer","Segment","basic","textAlign","className","PageTemplate","children","Container_Container","style","paddingTop","Grid","columns","Column","width","LeftMenu_LeftMenu","stretched","components_Footer","PostCard","nextProps","JSON","stringify","_this$props","targetArtist","targetWork","author","content","date","paddingBottom","Group","getPosts","page","axios","get","concat","Container","fetchData","_callee","receivedData","posts","filteredPosts","regenerator_default","wrap","_context","prev","next","fetching","Promise","all","service","sent","data","postFilter","stop","fetchMoreData","_callee2","_this$state","currentPage","lastPage","lastScroll","morePosts","filteredMorePosts","_context2","undefined","window","scrollTo","filter","post","hide","receiveSelectedMenu","dataFromMenu","renderPosts","PostCard_PostCard","ref","handleMoreClick","_callee3","lastScrollPosition","_context3","scrollY","setStateSynchronous","stateUpdate","resolve","_this$state2","components_PageTemplate","Button","circular","icon","App","components_Container","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62cb5a2a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nexport default class LeftMenu extends Component {\r\n  state = {\r\n    activeItem: 'ALL' // semantic-ui에서 제공하는 메뉴 컴포넌트 동작에 필요\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name });\r\n    this.props.callbackToTellParent({selectedArtist: name});\r\n  }\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n  \r\n    const artistItems = this.props.artists.map(\r\n      (artistName, index) => (\r\n        <Menu.Item\r\n          name={artistName}\r\n          key={index}\r\n          active={activeItem === artistName}\r\n          onClick={this.handleItemClick}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <Menu pointing secondary vertical>\r\n        <Menu.Item name='ALL' active={activeItem === 'ALL'} onClick={this.handleItemClick} />\r\n        {artistItems}\r\n      </Menu>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            <Segment basic textAlign='center'>\r\n                    <div className=\"Page-Footer\">\r\n                        <p>2019 홍익대학교 미술대학 예술제 기획전시: self-recommend<br />\r\n                        타인추천 뷰어</p>\r\n                    </div>\r\n            </Segment>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Container, Grid } from 'semantic-ui-react';\r\nimport LeftMenu from './LeftMenu';\r\nimport Footer from './Footer';\r\n\r\nconst PageTemplate = ({artists, callbackToTellParent, children}) => {\r\n    return (\r\n        <div>\r\n            <Container style={ {paddingTop: '4%'} }>\r\n                <Grid columns='equal'>\r\n                    <Grid.Column width={4}>\r\n                        <LeftMenu artists={artists} callbackToTellParent={callbackToTellParent} />\r\n                    </Grid.Column>\r\n                    \r\n                    { /* 내용이 들어가는 곳 */ }\r\n                    <Grid.Column stretched>\r\n                        <div className=\"Page-Content\">\r\n                            {children}\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n                <Footer />\r\n            </Container>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default PageTemplate;","import React, { Component } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\n\r\nexport default class PostCard extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        return JSON.stringify(this.props) !== JSON.stringify(nextProps)\r\n    }\r\n\r\n    render() {\r\n        const { targetArtist, targetWork, author, content, date } = this.props\r\n        return (\r\n            <div style={{paddingTop: '1%', paddingBottom: '1%'}}>\r\n                <Segment.Group>\r\n                    <Segment secondary>{targetArtist} 작가의 &lt;{targetWork}&gt;에 대한 추천평</Segment>\r\n                    <Segment>{author} 작성 ({date})</Segment>\r\n                    <Segment>{content}</Segment>\r\n                </Segment.Group>\r\n            </div>\r\n            \r\n        )\r\n  }\r\n}","import axios from 'axios';\r\n\r\nexport function getAllArtists() {\r\n    return axios.get('/api/posts/artists');\r\n}\r\n\r\nexport function getPosts(targetArtist, page) {\r\n    if (targetArtist === 'ALL') {\r\n        return axios.get('/api/posts/page/' + page);\r\n    } else {\r\n        return axios.get(`/api/posts/${targetArtist}/page/${page}`);\r\n    }\r\n    \r\n}\r\n","import React, { Component } from 'react';\r\nimport PageTemplate from './PageTemplate';\r\nimport PostCard from './PostCard';\r\nimport { Segment, Button } from 'semantic-ui-react';\r\nimport * as service from '../services/post';\r\n\r\nclass Container extends Component {\r\n    fetchData = async (targetArtist) => {\r\n        this.setState({\r\n            fetching: true // 요청중\r\n        })\r\n\r\n        const receivedData = await Promise.all([\r\n            service.getAllArtists(), // 메뉴에 표시할 아티스트 목록을 요청\r\n            service.getPosts(targetArtist, 1) // 옵션에 따라 포스트를 받아옴\r\n         ])\r\n\r\n         const artists = receivedData[0].data;\r\n         const posts = receivedData[1].data;\r\n         const filteredPosts = this.postFilter(posts);\r\n         //console.log(filteredPosts)\r\n         this.setState({\r\n             fetching: false,\r\n             artists,\r\n             targetArtist, //setState가 비동기 작동하므로 이 함수에는 직접 인수로 주지만, 업데이트(fetchMoreData)를 위해 state에 기록은 한다.\r\n             posts: filteredPosts\r\n         })\r\n        \r\n    }\r\n\r\n    fetchMoreData = async () => {\r\n        const { targetArtist, currentPage, posts, lastPage, lastScroll } = this.state;\r\n\r\n        this.setState({\r\n            fetching: true // 요청중\r\n        })\r\n\r\n        const receivedData = await service.getPosts(targetArtist, this.state.currentPage + 1); // 옵션에 따라 포스트를 받아옴\r\n\r\n        const morePosts = receivedData.data;\r\n        const filteredMorePosts = this.postFilter(morePosts);\r\n        // console.log(filteredMorePosts[0])\r\n\r\n        if (filteredMorePosts[0] === undefined) { // 새로 받아온 데이터가 없으면 (마지막 페이지라면)\r\n            this.setState({\r\n                lastPage: !lastPage\r\n            })\r\n        }\r\n\r\n        // console.log(this.state.lastPage)\r\n\r\n        this.setState({ // targetArtist가 변한 것은 아니므로 수정하지 않는다\r\n             fetching: false,\r\n             currentPage: currentPage + 1,\r\n             posts: posts.concat(filteredMorePosts)\r\n        })\r\n        \r\n        window.scrollTo(0, lastScroll) //마지막 스크롤 위치로 이동한다\r\n\r\n    }\r\n\r\n    postFilter = (posts) => {\r\n        const filteredPosts = posts.filter(post => post.hide === false)\r\n        return filteredPosts;\r\n    }\r\n\r\n    receiveSelectedMenu = (dataFromMenu) => {\r\n        // 사용자가 메뉴를 선택하면 그 값을 메뉴 컴포넌트에서 받아온다.\r\n        const { selectedArtist } = dataFromMenu;\r\n        this.setState({\r\n                targetArtist: selectedArtist, // 메뉴를 변경하였으므로 아티스트 데이터와 페이지 데이터를 스테이트에서 초기화\r\n                currentPage: 1,\r\n                lastPage: false\r\n        });\r\n        this.fetchData(selectedArtist, 1); //setState가 비동기이므로 1을 굳이 적어보았음\r\n    }\r\n\r\n    renderPosts = () => {\r\n        const postCards = this.state.posts.map((post, index) => {\r\n            return (\r\n                <PostCard targetArtist={post.targetArtist} targetWork={post.targetWork} author={post.author} content={post.content} date={post.date} key={index} ref={ref => this.post=ref}/>\r\n            );\r\n        });\r\n\r\n        return postCards;\r\n    }\r\n\r\n    handleMoreClick = async () => {\r\n        const lastScrollPosition = window.scrollY;\r\n        await this.setStateSynchronous(state => ({lastScroll: lastScrollPosition}));\r\n        \r\n        this.fetchMoreData()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(\"ALL\");\r\n    }\r\n\r\n    setStateSynchronous(stateUpdate) {\r\n        return new Promise(resolve => {\r\n            this.setState(stateUpdate, () => resolve());\r\n        });\r\n    }\r\n\r\n    state = {\r\n        fetching: false, // REST 요청 완료 여부를 담는 변수\r\n        artists: [], // 요청한 artists 목록을 담는 변수\r\n        posts: [{\r\n            targetArtist: \"Loading\",\r\n            targetWork: \"Loading\",\r\n            author: \"Loading\",\r\n            content: \"Loading\",\r\n            date: \"Loading\",\r\n        }],\r\n\r\n        targetArtist: '',\r\n        currentPage: 1,\r\n        lastPage: false,\r\n        lastScroll: 0\r\n    }\r\n\r\n  render(){\r\n    const { artists, fetching, lastPage } = this.state;\r\n    return(\r\n      <PageTemplate artists={artists} callbackToTellParent={this.receiveSelectedMenu}>\r\n          {fetching ? 'Loading...' : this.renderPosts()}\r\n          {lastPage ? '' : <Segment basic textAlign='center'><Button circular icon='plus' onClick={this.handleMoreClick} /></Segment>}\r\n      </PageTemplate>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\nimport Container from './components/Container';\n\nclass App extends Component {\n\n  render(){\n    return(\n      <Container />\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}